{"version":3,"sources":["api/config.js","redux/actions.js","api/fetchData.js","components/CreateTodo/CreateTodo.js","components/TodosList/TodoItem.js","components/TodosList/TodosList.js","App.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["axios","create","baseURL","timeout","headers","getFailure","error","type","payload","fetchTodos","dispatch","api","get","then","response","data","catch","connect","state","todos","addTodo","todo","post","name","description","fetchCreateTodo","props","useState","isValidData","setIsValidData","setName","setDescription","className","htmlFor","placeholder","value","onChange","e","target","length","onClick","preventDefault","disabled","updateTodo","patch","_id","fetchUpdateTodo","updateStatus","id","status","put","done","fetchStatusUpdateTodo","deleteTodo","delete","fetchDeleteTodo","editMode","setEditMode","onDoubleClick","checked","readOnly","updatedTodo","initData","useEffect","map","el","idx","key","severConnect","serverStatus","color","style","Boolean","window","location","hostname","match","initTodos","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.b8e02d1d.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'http://localhost:5000',\r\n    timeout: 1000,\r\n    headers: {}\r\n});","export const GET_TODOS = 'GET_TODOS';\r\nexport const GET_FAILURE = 'GET_FAILURE';\r\n\r\nexport const getFailure = (error) => ({\r\n    type: GET_FAILURE,\r\n    payload: error\r\n});\r\n\r\nexport const getTodos = (todos) => ({\r\n    type: GET_TODOS,\r\n    payload: todos\r\n});\r\n\r\n","import api from \"./config\";\r\nimport {getTodos, getFailure} from \"../redux/actions\";\r\n\r\nexport function fetchTodos() {\r\n    return (dispatch) => {\r\n        api.get('todo')\r\n            .then(response => {\r\n                dispatch(getTodos(response.data));\r\n            })\r\n            .catch(error => {\r\n                dispatch(getFailure(error));\r\n            })\r\n    }\r\n}\r\n\r\nexport function fetchCreateTodo(todo) {\r\n    return (dispatch) => {\r\n        api.post('todo',\r\n            {\r\n                name: todo.name,\r\n                description: todo.description\r\n            })\r\n            .then(() => {\r\n                dispatch(fetchTodos());\r\n            })\r\n            .catch(error => {\r\n                dispatch(getFailure(error));\r\n            })\r\n    }\r\n}\r\n\r\nexport function fetchStatusUpdateTodo({id, status}) {\r\n    return (dispatch) => {\r\n        api.put(`todo/${id}`,\r\n            {\r\n                done: status\r\n            })\r\n            .then(() => {\r\n                dispatch(fetchTodos());\r\n            })\r\n            .catch(error => {\r\n                dispatch(getFailure(error));\r\n            })\r\n    }\r\n}\r\n\r\nexport function fetchUpdateTodo(todo) {\r\n    return (dispatch) => {\r\n        api.patch(`todo/${todo._id}`,\r\n            {\r\n                name: todo.name,\r\n                description: todo.description\r\n            })\r\n            .then(() => {\r\n                dispatch(fetchTodos());\r\n            })\r\n            .catch(error => {\r\n                dispatch(getFailure(error));\r\n            })\r\n    }\r\n}\r\n\r\nexport function fetchDeleteTodo(id) {\r\n    return (dispatch) => {\r\n        api.delete(`todo/${id}`)\r\n            .then(() => {\r\n                dispatch(fetchTodos());\r\n            })\r\n            .catch(error => {\r\n                dispatch(getFailure(error));\r\n            })\r\n    }\r\n}","import React, {useState} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {fetchCreateTodo} from \"../../api/fetchData\";\r\n\r\nconst CreateTodo = (props) => {\r\n    const [isValidData, setIsValidData] = useState(false);\r\n    const [name, setName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const addTodo = (e) => {\r\n        e.preventDefault();\r\n        props.addTodo({name: name, description: description});\r\n        setName('');\r\n        setDescription('');\r\n    }\r\n\r\n    return (\r\n        <form className=\"form-inline\">\r\n            <div className=\"form-group mb-2\">\r\n                <label htmlFor=\"name\" className=\"sr-only\">Name</label>\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Name\"\r\n                       value={name}\r\n                       onChange={(e) => {\r\n                           setName(e.target.value)\r\n                           setIsValidData(e.target.value.length > 0 && description.length > 0)\r\n                       }}\r\n                />\r\n            </div>\r\n            <div className=\"form-group mx-sm-3 mb-2\">\r\n                <label htmlFor=\"desc\" className=\"sr-only\">Description</label>\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Description\"\r\n                       value={description}\r\n                       onChange={(e) => {\r\n                           setDescription(e.target.value);\r\n                           setIsValidData(name.length > 0 && e.target.value.length > 0)\r\n                       }}\r\n                />\r\n            </div>\r\n            <button className=\"btn btn-success mb-2\" onClick={addTodo} disabled={!isValidData}>Add</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => (\r\n    {todos: state.todos}\r\n);\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addTodo: (todo) => dispatch(fetchCreateTodo(todo)),\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateTodo);","import React, {useState} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {fetchDeleteTodo, fetchStatusUpdateTodo, fetchUpdateTodo} from \"../../api/fetchData\";\r\n\r\nconst TodoItem = (props) => {\r\n    const todo = props.todo;\r\n    const [name, setName] = useState(todo.name);\r\n    const [description, setDescription] = useState(todo.description);\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const cancel = () => {\r\n        setName(props.todo.name);\r\n        setDescription(props.todo.description);\r\n        setEditMode(false);\r\n    }\r\n\r\n    const changeStatus = (e) => {\r\n        e.preventDefault();\r\n        const id = todo._id;\r\n        props.updateStatus({id: id, status: e.target.checked});\r\n    }\r\n\r\n    const updateTodo = (e) => {\r\n        e.preventDefault();\r\n        const updatedTodo = {...todo, name: name, description: description};\r\n        props.updateTodo(updatedTodo);\r\n        setEditMode(false);\r\n    }\r\n\r\n    const deleteTodo = (e) => {\r\n        e.preventDefault();\r\n        const id = todo._id;\r\n        props.deleteTodo(id);\r\n    }\r\n\r\n    return (\r\n        <span onDoubleClick={()=>setEditMode(true)}>\r\n            <div className=\"input-group flex-nowrap p-2\">\r\n                <div className=\"input-group-prepend\">\r\n                    <div className=\"input-group-text\">\r\n                        <input type=\"checkbox\" checked={todo.done} onChange={changeStatus} />\r\n                    </div>\r\n                </div>\r\n                {editMode ?\r\n                    <input type=\"text\" className=\"form-control\" value={name} onChange={(e) => setName(e.target.value)} />\r\n                    :\r\n                    <>\r\n                        <input type=\"text\" className=\"form-control\" value={todo.name} readOnly=\"readonly\"/>\r\n                        <div className=\"input-group-append\">\r\n                            <button className=\"btn btn-secondary\" onClick={deleteTodo}>Delete</button>\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n            {editMode ?\r\n                <>\r\n                    <textarea className=\"form-control\" value={description} onChange={(e) => setDescription(e.target.value)} />\r\n                    <div className=\"row justify-content-end\">\r\n                        <button className=\"btn btn-success m-2\" onClick={updateTodo}>Update</button>\r\n                        <button className=\"btn btn-secondary m-2\" onClick={cancel}>Cancel</button>\r\n                    </div>\r\n                </>\r\n                :\r\n                <textarea className=\"form-control-plaintext pl-2\" value={todo.description} readOnly=\"readonly\" />\r\n            }\r\n        </span>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => (\r\n    { todos: state.todos }\r\n);\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTodo: (todo) => dispatch(fetchUpdateTodo(todo)),\r\n        updateStatus: (data) => dispatch(fetchStatusUpdateTodo(data)),\r\n        deleteTodo: (id) => dispatch(fetchDeleteTodo(id)),\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoItem);","import React, {useEffect} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport {fetchTodos} from \"../../api/fetchData\";\r\n\r\nconst TodosList = (props) => {\r\n\r\n    useEffect(() => {\r\n        props.initData()\r\n    }, []);\r\n\r\n    return (\r\n        <ul className=\"list-group w-75\">\r\n            {\r\n                props.todos.map((el, idx) =>\r\n                    <li key={idx} className=\"list-group-item\">\r\n                        <TodoItem todo={el}/>\r\n                    </li>\r\n                )\r\n            }\r\n        </ul>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => (\r\n    {todos: state.todos}\r\n);\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        initData: () => dispatch(fetchTodos()),\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodosList);","import React from 'react';\nimport {connect} from \"react-redux\";\nimport CreateTodo from \"./components/CreateTodo/CreateTodo\";\nimport TodosList from \"./components/TodosList/TodosList\";\n\nfunction App(props) {\n    const serverStatus = {\n        color: props.severConnect ? 'green' : 'red'\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"row justify-content-sm-end\">\n                Server status: &nbsp; <span style={serverStatus}>{props.severConnect ? 'Ok' : 'Down'}</span>\n            </div>\n            <h2 className=\"text-center p-3\">React/Redux Todo list</h2>\n            <div className=\"row justify-content-center p-2\">\n                <CreateTodo />\n            </div>\n            <div className=\"row justify-content-center p-2\">\n                <TodosList />\n            </div>\n        </div>\n    );\n}\nconst mapStateToProps = (state) => (\n    {severConnect: state.severConnect}\n);\n\nexport default connect(mapStateToProps, null)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actions from '../redux/actions';\r\n\r\nconst initTodos = {\r\n    todos: [],\r\n    severConnect: false\r\n};\r\n\r\nconst todos = (state = initTodos, action) => {\r\n    switch (action.type) {\r\n        case actions.GET_TODOS:\r\n            return {\r\n                ...state,\r\n                todos: action.payload,\r\n                severConnect: true\r\n            };\r\n        case actions.GET_FAILURE:\r\n            return {\r\n                ...state,\r\n                severConnect: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default todos;\r\n","import { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from 'redux-thunk';\r\nimport todos from \"./reducer\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\n\r\nconst store = createStore(\r\n    todos,\r\n    composeWithDevTools(\r\n        applyMiddleware(thunk)\r\n    )\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}