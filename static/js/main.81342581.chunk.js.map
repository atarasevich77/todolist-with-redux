{"version":3,"sources":["components/CreateTodo/CreateTodo.js","components/TodosList/TodoItem.js","components/TodosList/TodosList.js","App.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["connect","state","todos","dispatch","addTodo","todo","type","title","props","useState","setTitle","value","onChange","e","target","onClick","updateTodo","deleteTodo","editMode","setEditMode","checked","done","updatedTodo","onDoubleClick","map","el","idx","key","App","className","Boolean","window","location","hostname","match","id","initTodos","action","updatedState","filteredState","filter","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sRA8BeA,eAXS,SAACC,GAAD,MACpB,CAACC,MAAOD,EAAMC,UAGS,SAACC,GAAD,MACvB,CACIC,QACI,SAACC,GAAD,OAAUF,EAAS,CAACG,KAAM,WAAYC,MAAOF,QAI1CL,EA3BI,SAACQ,GAAW,IAAD,EACAC,mBAAS,IADT,mBACnBF,EADmB,KACZG,EADY,KAQ1B,OACI,6BACI,2BAAOJ,KAAK,OAAOK,MAAOJ,EAAOK,SAAU,SAACC,GAAD,OAAOH,EAASG,EAAEC,OAAOH,UACpE,4BAAQI,QARA,WACZP,EAAMJ,QAAQG,GACdG,EAAS,MAML,W,OC8CGV,eAXS,SAACC,GAAD,MACpB,CAAEC,MAAOD,EAAMC,UAGQ,SAACC,GACxB,MAAO,CACHa,WAAY,SAACX,GAAD,OAAUF,EAAS,CAACG,KAAM,cAAeD,KAAMA,KAC3DY,WAAY,SAACZ,GAAD,OAAUF,EAAS,CAACG,KAAM,cAAeD,KAAMA,QAIpDL,EAzDE,SAACQ,GACd,IAAMH,EAAOG,EAAMH,KADK,EAEEI,mBAASJ,EAAKE,OAFhB,mBAEjBA,EAFiB,KAEVG,EAFU,OAGQD,oBAAS,GAHjB,mBAGjBS,EAHiB,KAGPC,EAHO,KAyBxB,OACI,6BACI,2BAAOb,KAAK,WAAWc,QAASf,EAAKgB,KAAMT,SAjB9B,SAACC,GAClB,IAAMS,EAAW,2BAAOjB,GAAP,IAAagB,KAAMR,EAAEC,OAAOM,UAC7CZ,EAAMQ,WAAWM,MAgBZJ,EACG,oCACI,2BAAOZ,KAAK,OAAOK,MAAOJ,EAAOK,SAAU,SAACC,GAAD,OAAOH,EAASG,EAAEC,OAAOH,UACpE,4BAAQI,QAhBJ,WAChB,IAAMO,EAAW,2BAAOjB,GAAP,IAAaE,MAAOA,IACrCC,EAAMQ,WAAWM,GACjBH,GAAY,KAaA,UACA,4BAAQJ,QA3BT,WACXL,EAASF,EAAMH,KAAKE,OACpBY,GAAY,KAyBA,WAGJ,oCACI,0BAAMI,cAAe,kBAAIJ,GAAY,KAChCd,EAAKE,OAEV,4BAAQQ,QAlBL,WACfP,EAAMS,WAAWZ,KAiBL,eCpBLL,eAJS,SAACC,GAAD,MACpB,CAACC,MAAOD,EAAMC,SAGsB,KAAzBF,EAlBG,SAACQ,GACf,OACI,4BAEQA,EAAMN,MAAMsB,KAAI,SAACC,EAAIC,GAAL,OACZ,wBAAIC,IAAKD,GACL,kBAAC,EAAD,CAAUrB,KAAMoB,YCKzBG,MAVf,WACI,OACI,yBAAKC,UAAU,OAAf,wBAEI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCjBFC,EAAK,EAEHC,EAAY,CACdlC,MAAO,CACH,CAACiC,KAAMA,EAAI5B,MAAO,QAASc,MAAM,GACjC,CAACc,KAAMA,EAAI5B,MAAO,SAAUc,MAAM,KA2B3BnB,EAvBD,WAAgC,IAA/BD,EAA8B,uDAAtBmC,EAAWC,EAAW,uCACzC,OAAQA,EAAO/B,MACX,IAAK,WACD,OAAO,2BAAIL,GAAX,IACIC,MAAM,GAAD,mBAAMD,EAAMC,OAAZ,CAAmB,CAACiC,KAAMA,EAAI5B,MAAO8B,EAAO9B,MAAOc,MAAM,OAEtE,IAAK,cACD,IAAMiB,EAAerC,EAAMC,MAAMsB,KAAI,SAAAnB,GACjC,OAAGA,EAAK8B,KAAOE,EAAOhC,KAAK8B,GAChBE,EAAOhC,KAEPA,KAGf,OAAO,2BAAIJ,GAAX,IAAkBC,MAAOoC,IAC7B,IAAK,cACD,IAAMC,EAAgBtC,EAAMC,MAAMsC,QAAO,SAAAnC,GAAI,OAAIA,EAAK8B,KAAOE,EAAOhC,KAAK8B,MACzE,OAAO,2BAAIlC,GAAX,IAAkBC,MAAOqC,IAC7B,QACI,OAAOtC,I,OClBJwC,EAPDC,sBACVxC,EACAyC,8BACIC,8BCERC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,QAGRO,SAASC,eAAe,SHoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.81342581.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nconst CreateTodo = (props) => {\r\n    const [title, setTitle] = useState('');\r\n\r\n    const addTodo = () => {\r\n        props.addTodo(title);\r\n        setTitle('');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"text\" value={title} onChange={(e) => setTitle(e.target.value)} />\r\n            <button onClick={addTodo}>Add</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => (\r\n    {todos: state.todos}\r\n);\r\n\r\nconst mapDispatchToProps = (dispatch) => (\r\n    {\r\n        addTodo:\r\n            (todo) => dispatch({type: 'TODO_ADD', title: todo})\r\n    }\r\n);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateTodo);","import React, {useState} from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nconst TodoItem = (props) => {\r\n    const todo = props.todo;\r\n    const [title, setTitle] = useState(todo.title);\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const cancel = () => {\r\n        setTitle(props.todo.title);\r\n        setEditMode(false);\r\n    }\r\n\r\n    const changeStatus = (e) => {\r\n        const updatedTodo = {...todo, done: e.target.checked};\r\n        props.updateTodo(updatedTodo);\r\n    }\r\n\r\n    const changeTitle = () => {\r\n        const updatedTodo = {...todo, title: title};\r\n        props.updateTodo(updatedTodo);\r\n        setEditMode(false);\r\n    }\r\n\r\n    const deleteTodo = () => {\r\n        props.deleteTodo(todo);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"checkbox\" checked={todo.done} onChange={changeStatus}/>\r\n            {editMode ?\r\n                <>\r\n                    <input type=\"text\" value={title} onChange={(e) => setTitle(e.target.value)}/>\r\n                    <button onClick={changeTitle}>Update</button>\r\n                    <button onClick={cancel}>Cancel</button>\r\n                </>\r\n                :\r\n                <>\r\n                    <span onDoubleClick={()=>setEditMode(true)}>\r\n                        {todo.title}\r\n                    </span>\r\n                    <button onClick={deleteTodo}>Delete</button>\r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => (\r\n    { todos: state.todos }\r\n);\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTodo: (todo) => dispatch({type: 'TODO_UPDATE', todo: todo}),\r\n        deleteTodo: (todo) => dispatch({type: 'TODO_DELETE', todo: todo})\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoItem);","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nconst TodosList = (props) => {\r\n    return (\r\n        <ul>\r\n            {\r\n                props.todos.map((el, idx) =>\r\n                    <li key={idx}>\r\n                        <TodoItem todo={el}/>\r\n                    </li>\r\n                )\r\n            }\r\n        </ul>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => (\r\n    {todos: state.todos}\r\n);\r\n\r\nexport default connect(mapStateToProps, null)(TodosList);","import React from 'react';\nimport './App.css';\nimport CreateTodo from \"./components/CreateTodo/CreateTodo\";\nimport TodosList from \"./components/TodosList/TodosList\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            React/Redux Todo list\n            <TodosList />\n            <CreateTodo />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nlet id = 0;\r\n\r\nconst initTodos = {\r\n    todos: [\r\n        {id: ++id, title: 'First', done: false},\r\n        {id: ++id, title: 'Second', done: true}\r\n    ]\r\n};\r\n\r\nconst todos = (state = initTodos, action) => {\r\n    switch (action.type) {\r\n        case 'TODO_ADD':\r\n            return {...state,\r\n                todos: [...state.todos, {id: ++id, title: action.title, done: false}]\r\n            };\r\n        case 'TODO_UPDATE':\r\n            const updatedState = state.todos.map(todo => {\r\n                if(todo.id === action.todo.id){\r\n                    return action.todo;\r\n                } else {\r\n                    return todo;\r\n                }\r\n            });\r\n            return {...state, todos: updatedState};\r\n        case 'TODO_DELETE':\r\n            const filteredState = state.todos.filter(todo => todo.id !== action.todo.id);\r\n            return {...state, todos: filteredState};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default todos;\r\n","import { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport todos from \"./reducer\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\n\r\nconst store = createStore(\r\n    todos,\r\n    composeWithDevTools(\r\n        applyMiddleware()\r\n    )\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}